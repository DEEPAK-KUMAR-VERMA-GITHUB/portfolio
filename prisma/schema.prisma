generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ProjectStatus {
  draft
  published
}

enum SkillCategory {
  frontend
  backend
  tools
  language
  database
  others
}

enum TimeLineType {
  education
  experience
  project
  certification
}

enum ContactStatus {
  new
  in_progress
  resolved
  spam
}

enum UserRole {
  USER
  ADMIN
}

// Models

model User {
  id                 String           @id @default(uuid()) @db.Uuid
  name               String           @db.VarChar(50)
  email              String           @unique @db.VarChar(100)
  password           String           @db.VarChar(255)
  image              String?          @db.VarChar(255)
  title              String?          @db.VarChar(50)
  phone              String?          @db.VarChar(20)
  location           String?          @db.VarChar(100)
  bio                String?          @db.Text
  professionalTitles String[]         @db.VarChar(100)
  githubUrl          String?          @db.VarChar(255)
  linkedInUrl        String?          @db.VarChar(255)
  mailLink           String?          @db.VarChar(255)
  about              String?          @db.Text
  journey            String?          @db.Text
  tags               String[]         @db.VarChar(100)
  role               UserRole         @default(USER)
  projects           Project[]
  achievements       Achievement[]
  skills             Skill[]
  timelines          TimeLine[]
  resumes            Media[]
  Certification      Certification[]
  ContactMessage     ContactMessage[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Project {
  id          String        @id @default(uuid()) @db.Uuid
  title       String        @db.VarChar(100)
  description String        @db.Text
  image       String        @db.VarChar(255)
  techStack   String[]      @db.VarChar(100)
  category    String        @db.VarChar(50)
  githubUrl   String        @db.VarChar(255)
  liveUrl     String        @db.VarChar(255)
  featured    Boolean       @default(false)
  status      ProjectStatus @default(draft)
  userId      String        @db.Uuid
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Skill {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @db.VarChar(100)
  category  SkillCategory
  level     Int           @default(1) @db.SmallInt
  userId    String        @db.Uuid
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Achievement {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @db.VarChar(100)
  icon        String   @db.VarChar(100)
  issuer      String   @db.VarChar(100)
  date        DateTime
  description String   @db.Text
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TimeLine {
  id           String       @id @default(uuid()) @db.Uuid
  title        String       @db.VarChar(100)
  organization String       @db.VarChar(100)
  period       String       @db.VarChar(100)
  description  String       @db.Text
  type         TimeLineType
  current      Boolean      @default(false)
  userId       String       @db.Uuid
  user         User         @relation(fields: [userId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Media {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @db.VarChar(100)
  fileUrl     String   @db.VarChar(255)
  fileSize    String   @db.VarChar(100)
  fileType    String   @db.VarChar(100)
  isDefault   Boolean  @default(false)
  lastUpdated DateTime @default(now())
  description String?
  version     String?
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Certification {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @db.VarChar(100)
  issuer      String   @db.VarChar(100)
  date        DateTime
  icon        String?   @db.VarChar(100)
  image       String   @db.VarChar(255)
  verified    Boolean  @default(false)
  verifyUrl   String
  description String   @db.Text
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @db.VarChar(100)
  email     String        @db.VarChar(100)
  subject   String        @db.VarChar(100)
  message   String        @db.Text
  status    ContactStatus @default(new)
  labels    String[]      @default([])
  metadata  Json?
  userId    String?       @db.Uuid
  user      User?         @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([email])
}
